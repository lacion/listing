service: listing
frameworkVersion: '>=1.28.0 <2.0.0'

provider:
  name: aws
  runtime: go1.x
  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-1'}
  usagePlan:
    throttle:
      burstLimit: 10
      rateLimit: 2
  environment:
    SUPPORTED_NEWSLETTERS: ${self:custom.secrets.supportedNewsletters}
    SUBSCRIBERS_TABLE: ${self:custom.subscribersTableName}

plugins:
  - serverless-localstack
  - serverless-iam-roles-per-function

package:
  individually: true
  exclude:
    - ./**
  include:
    - ./bin/**

functions:
  # "main" entry point into this application responsible for 
  # collecting subscribers, storing them in the table and sending
  # confirmation emails to them
  listing:
    handler: bin/listing
    events:
      - http:
          path: subscribe
          method: POST
          cors: true
      - http:
          path: unsubscribe
          method: GET
          cors: true
      - http:
          path: confirm
          method: GET
          cors: true
      - http:
          path: subscribers
          method: GET
          cors: true
      - http:
          path: subscribers
          method: PUT
          cors: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - "dynamodb:DescribeTable"
          - "dynamodb:Query"
          - "dynamodb:Scan"
          - "dynamodb:GetItem"
          - "dynamodb:PutItem"
          - "dynamodb:UpdateItem"
          - "dynamodb:DeleteItem"
          - "dynamodb:BatchWriteItem"
        Resource:
          - { 'Fn::ImportValue': '${self:provider.stage}-SubscriptionsTableArn' }
      - Effect: Allow
        Action:
          - "ses:SendEmail"
          - "ses:SendRawEmail"
        Resource: "arn:aws:ses:${self:provider.region}:*:identity/*"
    environment:
      CONFIRM_URL: ${self:custom.secrets.confirmUrl}
      EMAIL_FROM: ${self:custom.secrets.emailFrom}
      TOKEN_SECRET: ${self:custom.secrets.tokenSecret}
      SUBSCRIBE_REDIRECT_URL: ${self:custom.secrets.subscribeRedirectUrl}
      CONFIRM_REDIRECT_URL: ${self:custom.secrets.confirmRedirectUrl}
      UNSUBSCRIBE_REDIRECT_URL: ${self:custom.secrets.unsubscribeRedirectUrl}
      API_TOKEN: ${self:custom.secrets.apiToken}
  # lambda used to handle bounce and complaint notifications from SES
  listing-sesnotify:
    handler: bin/sesnotify
    events:
      - sns:
          topicName: ${self:custom.snsTopicName}
          arn: { 'Fn::ImportValue': '${self:provider.stage}-NotificationsTopicArn' }
    environment:
      NOTIFICATIONS_TABLE: ${self:custom.snsTableName}
    iamRoleStatements:
      - Effect: Allow
        Action:
          - "dynamodb:DescribeTable"
          - "dynamodb:PutItem"
        Resource:
          - { 'Fn::ImportValue': '${self:provider.stage}-NotificationsTableArn' }

custom:
  secrets: ${file(secrets.json)}
  subscribersTableName: ${self:provider.stage}-listing-subscribers
  snsTableName: ${self:provider.stage}-listing-sesnotify
  snsTopicName: ${self:provider.stage}-listing-ses-notifications
  stages:
    - local
    - dev
  localstack:
    debug: true
    stages:
      # list of stages for which the plugin should be enabled
      - local
    host: http://localhost  # optional - LocalStack host to connect to
    autostart: false  # optional - start LocalStack in Docker on Serverless deploy
    lambda:
      # Enable this flag to improve performance
      mountCode: false
    docker:
      # Enable this flag to run "docker ..." commands as sudo
      sudo: false

